const {
    SlashCommandBuilder,
    EmbedBuilder,
    ButtonBuilder,
    ButtonStyle, ActionRowBuilder, ComponentType, ModalBuilder, TextInputBuilder, TextInputStyle,
} = require('discord.js');
const {Types} = require("mongoose");
const CardSubmission = require("../../schemas/cardSubmissionSchema");

module.exports = {
    data: new SlashCommandBuilder()
        .setName('submit')
        .setDescription('Submit a card, border, or general ')
        .addAttachmentOption(option =>
            option
                .setName('artwork')
                .setDescription('Artwork to use for the card')
                .setRequired(true)),
    async execute(interaction) {
        await interaction.deferReply({ ephemeral: true });
        const artwork = interaction.options.getAttachment('artwork');

        // Create new card submission object
        const cardSubmission = await new CardSubmission({
            _id: Types.ObjectId(),
        })

        // Start the submission process
        await createSubmissionCollector(interaction, cardSubmission, artwork);
    }
};

async function createSubmissionCollector(interaction, cardSubmission, artwork) {
    // Create TOS Embed
    const tosEmbed = new EmbedBuilder()
        .setColor(0x0099FF)
        .setTitle('Please accept the TOS before continuing')
        .setDescription(
            `Thank you <@${interaction.user.id}> for submitting your artwork to Pentaguards! 🔥

                Before we can continue creating your card, please read the following:
                
                📜 Terms and conditions:
                - Your submission is AI artwork and generated by you (don't submit AI artwork made by someone else)
                - The AI artwork's content is suitable for ages 13 and older (no NSFW or disturbing content)
                
                Breaking the terms and conditions may result in a removal of your Card from the database, timeout or ban from the Pentaguards Discord server.
                
                📄 Process and notes:
                - You are asked to fill out information about your Card
                - You can choose how to be credited (social media link, Discord username or not to be credited)
                - Your AI artwork will be automatically cropped to 2x3 aspect ratio from the middle
                - Your AI artwork will receive a border artwork based on the information you've given
                - You are assigned with a randomized identification artist ID (your future Card uploads will use this same ID)
                - Your submission will be forwarded to approval
                - You will receive a confirmation DM when your Card is approved or denied
                
                ✅ After approval:
                - Your Card will be added to the database and released to the community in a future Card batch release
                - Pentaguards can use your AI artwork in Cards and promotional materials
                - Pentaguards can add, modify or remove your Card's information in future game design changes
                
                To proceed with your AI artwork submission, you must "Agree" or "Disagree" to the contents of this message.`);

    // Create TOS buttons
    const tosAccept = new ButtonBuilder()
        .setCustomId('tosAccept')
        .setLabel('Accept')
        .setStyle(ButtonStyle.Primary);

    const tosReject = new ButtonBuilder()
        .setCustomId('tosReject')
        .setLabel('Reject')
        .setStyle(ButtonStyle.Danger);

    const tosButtons = new ActionRowBuilder().addComponents(tosAccept, tosReject);

    // Send the TOS embed with the buttons
    const currPage = await interaction.editReply({
        embeds: [tosEmbed.setFooter({ text: `Part 1 / 4` })],
        components: [tosButtons],
        fetchReply: true,
    });

    // Create a message collector
    const tosCollector = await currPage.createMessageComponentCollector({
        componentType: ComponentType.Button,
        max: 1,
    });

    // Send next message if user accepts TOS. Cancel submission process if they reject.
    tosCollector.on("collect", async (i) => {
        await i.deferUpdate();
        await tosCollector.stop();
        switch (i.customId) {
            case "tosAccept":
                await createArtistProfile(interaction, cardSubmission, artwork);
                break;
            case "tosReject":
                const rejectEmbed = new EmbedBuilder()
                    .setColor(0xFF0000)
                    .setDescription("Submission canceled.")
                await interaction.editReply({
                    embeds: [rejectEmbed],
                    components: [],
                })
        }
    });
}

async function createArtistProfile(interaction, cardSubmission, artwork) {
    // Call function to set up artist profile if it is not set up yet.

    // Continue to the next page
    await createThemeCollector(interaction, cardSubmission, artwork);
}

async function createThemeCollector(interaction, cardSubmission, artwork) {
    // Create Theme Embed
    const themeEmbed = new EmbedBuilder()
        .setColor(0x0099FF)
        .setTitle('Please Choose a Theme')
        .setDescription(
            `Please choose a Theme (time period) for your AI artwork:

            🐲 Fantasai | Fantasy = the faculty or activity of imagining impossible or improbable things
            - Magic, gravity breaking landscapes (floating islands, levitating rock pillars)
            - The aesthetic of middle ages lifestyle, castle, a knight in armor, character in elaborate attire...
            
            🌍 Modernai | Modern = "relating to the present or recent times as opposed to the remote past
            - Grounded by our reality: familiar landscapes, people, animals, everyday foods and transport...
            - Shares similarities with fantasy (middle ages) and future (technology & product design)
            
            🚀 Futurai | Future = a period of time following the moment of speaking or writing; time regarded as still to come
            - Anything high technology and space related, lightsabers, floating cities, aliens, what lurks in the universe
            - The aesthetic (sleek car design, planet landscape)`);

    // Create Theme buttons
    const fantasai = new ButtonBuilder()
        .setCustomId('fantasai')
        .setLabel('Fantasai')
        .setEmoji('🐲')
        .setStyle(ButtonStyle.Secondary);

    const modernai = new ButtonBuilder()
        .setCustomId('modernai')
        .setLabel('Modernai')
        .setEmoji('🌍')
        .setStyle(ButtonStyle.Secondary);

    const futurai = new ButtonBuilder()
        .setCustomId('futurai')
        .setLabel('Futurai')
        .setEmoji('🚀')
        .setStyle(ButtonStyle.Secondary);

    const cancelSubmission = new ButtonBuilder()
        .setCustomId('cancelSubmission')
        .setLabel('Cancal Submission')
        .setStyle(ButtonStyle.Danger);

    const themeButtons = new ActionRowBuilder().addComponents(fantasai, modernai, futurai, cancelSubmission);

    // Send the Theme embed with the buttons
    const currPage = await interaction.editReply({
        embeds: [themeEmbed.setFooter({ text: `Part 2 / 4` })],
        components: [themeButtons],
        fetchReply: true,
    });

    // Create a message collector
    const themeCollector = await currPage.createMessageComponentCollector({
        componentType: ComponentType.Button,
        max: 1,
    });

    // Collect user input and proceed to the next page
    themeCollector.on("collect", async (i) => {
        await i.deferUpdate();
        await themeCollector.stop();
        switch (i.customId) {
            case "cancelSubmission":
                const rejectEmbed = new EmbedBuilder()
                    .setColor(0xFF0000)
                    .setDescription("Submission canceled.")
                return await interaction.editReply({
                    embeds: [rejectEmbed],
                    components: [],
                })
            case "fantasai":
                cardSubmission.theme = '🐲 Fantasai';
                break;
            case "modernai":
                cardSubmission.theme = '🌍 Modernai';
                break;
            case "futurai":
                cardSubmission.theme = '🚀 Futurai';
                break;
            default:
                throw console.error;
        }

        await createCategoryCollector(interaction, cardSubmission, artwork);
    });
}

async function createCategoryCollector(interaction, cardSubmission, artwork) {
    // Create Category Embed
    const categoryEmbed = new EmbedBuilder()
        .setColor(0x0099FF)
        .setTitle('Please Choose a Category')
        .setDescription(
            `<@${interaction.user.id}> has selected ${theme}!
            We now have the Theme selected for your Card!
            
            Next, please choose the Category for your AI artwork:

            🧍Character
            - People, portraits, aliens, demihumans, gods...
            
            🦙 Creature
            - Animals, monsters, dragon...
            
            🌄 Scape
            - Mood, nature, landscapes, buildings, interior designs, space, galaxies, botanical, foliage...
            
            🛠️ Equipment
            - Weapons, guns,wearable, clothing, accessories, throwable, transport, vehicles, magic...
            
            🍎 Consumable
            - Foods, drinks, potions, elixir, snacks, buffs...
            
            🔘  Extres
            - Abstract, religion, currency, technology, misc...`);

    // Create Category buttons
    const character = new ButtonBuilder()
        .setCustomId('character')
        .setLabel('Character')
        .setEmoji('🧍')
        .setStyle(ButtonStyle.Secondary);

    const creature = new ButtonBuilder()
        .setCustomId('creature')
        .setLabel('Creature')
        .setEmoji('🦙')
        .setStyle(ButtonStyle.Secondary);

    const scape = new ButtonBuilder()
        .setCustomId('scape')
        .setLabel('Scape')
        .setEmoji('🌄')
        .setStyle(ButtonStyle.Secondary);

    const equipment = new ButtonBuilder()
        .setCustomId('equipment')
        .setLabel('Equipment')
        .setEmoji('🛠️')
        .setStyle(ButtonStyle.Secondary);

    const consumable = new ButtonBuilder()
        .setCustomId('consumable')
        .setLabel('Consumable')
        .setEmoji('🍎')
        .setStyle(ButtonStyle.Secondary);

    const extres = new ButtonBuilder()
        .setCustomId('extres')
        .setLabel('Extres')
        .setEmoji('🔘')
        .setStyle(ButtonStyle.Secondary);

    const cancelSubmission = new ButtonBuilder()
        .setCustomId('cancelSubmission')
        .setLabel('Cancel Submission')
        .setStyle(ButtonStyle.Danger);

    const categoryButtons1 = new ActionRowBuilder().addComponents(character, creature, scape, cancelSubmission);
    const categoryButtons2 = new ActionRowBuilder().addComponents(equipment, consumable, extres);

    // Send the Category embed with the buttons
    const currPage = await interaction.editReply({
        embeds: [categoryEmbed.setFooter({ text: `Page 3 / 4` })],
        components: [categoryButtons1, categoryButtons2],
        fetchReply: true,
    });

    // Create a message collector
    const categoryCollector = await currPage.createMessageComponentCollector({
        componentType: ComponentType.Button,
        max: 1,
    });

    // Collect user's choice for category
    categoryCollector.on("collect", async (i) => {
        await i.deferUpdate();
        await categoryCollector.stop();
        switch (i.customId) {
            case "cancelSubmission":
                const rejectEmbed = new EmbedBuilder()
                    .setColor(0xFF0000)
                    .setDescription("Submission canceled.")
                return await interaction.editReply({
                    embeds: [rejectEmbed],
                    components: [],
                })
            case "character":
                cardSubmission.category = '🧍 Character';
                break;
            case "creature":
                cardSubmission.category = '🦙 Creatures';
                break;
            case "scape":
                cardSubmission.category = '🌄 Scape';
                break;
            case "equipment":
                cardSubmission.category = '🛠️ Equipment';
                break;
            case "consumable":
                cardSubmission.category = '🍎 Consumable';
                break;
            case "extres":
                cardSubmission.category = '🔘 Extres';
                break;
            default:
                throw console.error;
        }

        categoryCollector.stop();
        await createStyleCollector(interaction, cardSubmission, artwork);
    });
}

async function createStyleCollector(interaction, artwork, theme, category) {
    // Create Style Embed
    const styleEmbed = new EmbedBuilder()
        .setColor(0x0099FF)
        .setTitle('Please Choose a Style')
        .setDescription(
            `<@${interaction.user.id}> has selected ${category}, in ${theme}!

            Next, what's the Style of your AI artwork:
            
            🌸 Anime
            
            📷 Realistic
            - Photorealism, hyperrealism, photograph
            
            🖌️ Stylized
            - Digital painting, concept art, oil painting, watercolor`);

    // Create Style buttons
    const anime = new ButtonBuilder()
        .setCustomId('anime')
        .setLabel('Anime')
        .setEmoji('🌸')
        .setStyle(ButtonStyle.Secondary);

    const realistic = new ButtonBuilder()
        .setCustomId('realistic')
        .setLabel('Realistic')
        .setEmoji('📷')
        .setStyle(ButtonStyle.Secondary);

    const stylized = new ButtonBuilder()
        .setCustomId('stylized')
        .setLabel('Stylized')
        .setEmoji('🖌️')
        .setStyle(ButtonStyle.Secondary);

    const cancelSubmission = new ButtonBuilder()
        .setCustomId('cancelSubmission')
        .setLabel('Cancel Submission')
        .setStyle(ButtonStyle.Danger);

    const styleButtons = new ActionRowBuilder().addComponents(anime, realistic, stylized, cancelSubmission);

    // Send the Style embed with the buttons
    const currPage = await interaction.editReply({
        embeds: [styleEmbed.setFooter({ text: `Page 4 / 4` })],
        components: [styleButtons],
        fetchReply: true,
    });

    // Create a message collector
    const styleCollector = await currPage.createMessageComponentCollector({
        componentType: ComponentType.Button,
        max: 1,
    });

    // Collect user's choice for category
    styleCollector.on("collect", async (i) => {
        await i.deferUpdate();
        await styleCollector.stop();
        let style = i.customId;
        switch (i.customId) {
            case "cancelSubmission":
                const rejectEmbed = new EmbedBuilder()
                    .setColor(0xFF0000)
                    .setDescription("Submission canceled.")
                return await interaction.editReply({
                    embeds: [rejectEmbed],
                    components: [],
                })
            case "anime":
                style = '🌸 Anime';
                break;
            case "realistic":
                style = '📷 Realistic';
                break;
            case "stylized":
                style = '🖌 Stylized';
                break;
            default:
                throw console.error;
        }

        await additionalInfo(interaction, artwork, theme, category, style);
    });
}

async function additionalInfo(interaction, cardSubmission, artwork) {
    // Create modal to ask for AI Model and art name
    const modal = new ModalBuilder()
        .setCustomId(`additional-card-info`)
        .setTitle(`Additional Card Info`);

    const cardName = new TextInputBuilder()
        .setCustomId(`cardName`)
        .setLabel(`Card Name`)
        .setRequired(true)
        .setPlaceholder('Choose a name for the card')
        .setStyle(TextInputStyle.Short);

    const aiModel = new TextInputBuilder()
        .setCustomId(`aiModel`)
        .setLabel(`AI Model`)
        .setRequired(true)
        .setPlaceholder('ex. Midjourney, Stable Diffusion, NovelAI, DALLE-2')
        .setStyle(TextInputStyle.Short);

    const row1 = new ActionRowBuilder().addComponents(cardName);
    const row2 = new ActionRowBuilder().addComponents(aiModel);

    // Add inputs to the modal
    modal.addComponents(row1, row2);

    // Show the modal to the user
    await interaction.showModal(modal);

    // Source: https://stackoverflow.com/questions/72792015/modal-collector-discord-js
    // Get the Modal Submit Interaction that is emitted once the User submits the Modal
    const submitted = await interaction.awaitModalSubmit({
        // Make sure we only accept Modals from the User who sent the original Interaction we're responding to
        filter: i => i.user.id === interaction.user.id,
    }).catch(error => {
        // Catch any Errors that are thrown
        console.error(error);
        return null;
    })

    // Process the modal input and proceed to the final page
    if (submitted) {
        cardSubmission.name = interaction.fields.getTextInputValue('cardName');
        cardSubmission.aiModel = interaction.fields.getTextInputValue('aiModel');
        await finalPage(interaction, cardSubmission, artwork);
    }
}

async function finalPage(interaction, cardSubmission, artwork) {
    // Generate the card image

    // Save the card submission
    await cardSubmission.save().catch(console.error);

    // Show user their submitted card
    const submissionEmbed = new EmbedBuilder()
        .setColor(0x0099FF)
        .setTitle('Your Card Submission')
        .setDescription(`<@${interaction.user.id}>, you have successfully submitted a card! The community will vote on it after it has been approved.`)
        .setImage(artwork.attachment)
        .addFields(
            { name: "Theme", value: theme, inline: true},
            { name: "Category", value: category, inline: true},
            { name: "Style", value: style, inline: true},
        )

    await interaction.editReply({
        embeds: [submissionEmbed],
        components: [],
    });
}